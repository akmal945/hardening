✅ 1. Install Dynamic IP Restrictions Module
Skip if already installed.

On Windows Server:

Open Server Manager

Go to Manage > Add Roles and Features

Feature: ✔️ Dynamic IP Restrictions

Install & restart IIS

✅ 2. Enable Dynamic IP Restrictions for Your Site
Open IIS Manager

Select your website

Open “Dynamic IP Restrictions”

On the right, click “Edit Dynamic Restriction Settings”

📋 Recommended Settings:

✅ Deny IP Address based on the number of concurrent requests

Max Concurrent Requests: 5

✅ Deny IP Address based on request rate

Allow: 5 requests

Over: 5 seconds

📌 This blocks an IP that hits login.php 5 times in 5 seconds.

 3. Enable Response Behavior
Still in IIS Manager:

Click “Edit Feature Settings…”

✔ Enable Deny Action Type: select Abort or Unauthorized (403)

Optional: Log denied requests for tracking

Path: yourapp\login\web.config

<configuration>
  <system.webServer>
    <security>
      <dynamicIpSecurity enableLoggingOnlyMode="false">
        <denyByConcurrentRequests enabled="true" maxConcurrentRequests="5" />
        <denyByRequestRate enabled="true" maxRequests="5" requestIntervalInMilliseconds="5000" />
      </dynamicIpSecurity>
    </security>
  </system.webServer>
</configuration>

 How to Test
Use a browser or a script to send many POST requests to login.php in a few seconds.
After hitting the limit, you’ll get 403 Forbidden or connection reset (based on your deny action setting).

----------------------------------------------------------------

<?php
session_start();

// Initialize failed login attempt counter
if (!isset($_SESSION['login_attempts'])) {
    $_SESSION['login_attempts'] = 0;
    $_SESSION['last_attempt_time'] = time();
}

// If 5+ failed attempts and less than 15 minutes have passed
if ($_SESSION['login_attempts'] >= 5 && time() - $_SESSION['last_attempt_time'] < 900) {
    die("Too many login attempts. Please try again after 15 minutes.");
}

// Simulated validation example:
$username = $_POST['username'];
$password = $_POST['password'];

// Replace with your real login validation logic
$login_success = ($username === 'admin' && $password === 'pass123');

// If login fails
if (!$login_success) {
    $_SESSION['login_attempts']++;
    $_SESSION['last_attempt_time'] = time();
    die("Invalid login. Attempt #" . $_SESSION['login_attempts']);
}

// If login successful, reset counter
$_SESSION['login_attempts'] = 0;

// Proceed with login...
echo "Welcome, $username!";
?>

