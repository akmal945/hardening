Weak password requirements

<?php
$password = $_POST['password'];

// ✅ Check password strength
if (
    strlen($password) < 8 ||                        // ❌ Minimum 8 characters
    !preg_match('/[A-Z]/', $password) ||            // ❌ At least one uppercase letter
    !preg_match('/[a-z]/', $password) ||            // ❌ At least one lowercase letter
    !preg_match('/[0-9]/', $password) ||            // ❌ At least one number
    !preg_match('/[\W]/', $password)                // ❌ At least one special character (non-word)
) {
    die("Password is not strong enough. It must be at least 8 characters long and contain an uppercase letter, a lowercase letter, a number, and a special character.");
}

// ✅ If password meets all conditions, proceed to hash it
$hashed_password = password_hash($password, PASSWORD_DEFAULT);

// 💾 Save $hashed_password into your database here
?>




----------------------
Prevent use old password

<?php
// Get submitted old and new passwords
$oldPassword = $_POST['old_password'];
$newPassword = $_POST['new_password'];

// 🔄 Fetch current user data (e.g., from DB)
$user = getUserFromDatabase(); // Should return associative array including 'hashed_password'

// ✅ Step 1: Verify old password matches stored password
if (!password_verify($oldPassword, $user['hashed_password'])) {
    die("Old password is incorrect.");
}

// ❌ Step 2: Prevent reuse — new password must NOT match the current one
if (password_verify($newPassword, $user['hashed_password'])) {
    die("New password cannot be the same as the old password.");
}

// ✅ Step 3: Hash and save the new password
$newHashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);
updatePasswordInDatabase($newHashedPassword); // Save it securely

echo "Password updated successfully.";
?>